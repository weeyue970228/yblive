<template>
	<view  class="content">
		<!-- 主播和观众席信息 -->
		<livepull-top class="live_user" :liveuid="liveuid" :live_nicename="live_nicename" :live_avatar="live_avatar" :audience="audience"></livepull-top>
		
		<!-- 公屏聊天处 -->
		<livepull-chat class="chat_chat" :flag="flag" :livechat="livechat" :live_avatar="live_avatar" :chat_item="chat_item" @input="livechat_input"  @click="send"  @transport="transport()"  @goback="goback()"></livepull-chat>
	</view>
</template>

<script>
	import livepullTop from "./livepulltop.vue";
	import livepullChat from "./livepullchat.vue";
	import io from '../../../js_sdk/hyoga-uni-socket_io/uni-socket.io.js';
	
	const app = getApp();
	
	export default {
		data() {
			return {
				uid:'',
				token:'',
				liveuid:'',
				live_nicename:'',
				live_avatar:'',
				stream:'',
				anyway:'',
				liveinfo:[],
				userinfo:[],
				audience:[],
				chat_item: [],//聊天区域内容
				livechat:'',
				flag:true,
				flag_num:1,
				socket:'',
				scrollTop:9999,
				modeClass: ['fade'],
				transfromClass: {
					position: 'fixed',
					bottom: 0,
					top: 0,
					left: 0,
					right: 0,
					display: 'flex',
					'justify-content':'center',
					'align-items': 'center'
				},
				transShow: false,
			}
		},
		onLoad(e) {
			this.videoContext = uni.createVideoContext('pull',this);
			this.videoContext.requestFullScreen();
			
			console.log("测试");
			
			//判断是否登入
			var uid  = uni.getStorageSync('uid');
			var token  = uni.getStorageSync('token');
			
			if(uid == '' || token == ''){
				uni.showModal({
					title:'请登录',
					content:"请登录",
					success:function(){
						uni.navigateTo({
							url:'../../login/login'
						});
					}
				})
			}
			this.uid=uid;
			this.token=token;

			this.liveuid=e.liveuid;
			this.stream=e.stream;
			this.anyway=e.anyway;
			this.live_nicename=e.live_nicename;
			this.live_avatar=e.live_avatar;
			uni.request({
				url: app.globalData.site_url +'/appapi/?service=User.getUserHome',
				method: 'GET',
				data: {
					uid:this.uid,
					token:this.token,
					touid:this.uid,
				},
				success: res => {
					var data=res.data.data;;
					if(data.code!=0){
						uni.showToast({
							title: data.msg,
							icon:'none',
							duration: 2000
						});
						return 1;
					}
					this.userinfo=data['info'][0];				
				},
				fail: () => {},
				complete: () => {}
			});
			uni.request({
				url: app.globalData.site_url +'/appapi/?service=Live.enterRoom',
				method: 'GET',
				data: {
					uid:this.uid,
					token:this.token,
					liveuid:this.liveuid,
					stream:this.stream,
				},
				success: res => {
					var data=res.data.data;;
					if(data.code!=0){
						uni.showToast({
							title: data.msg,
							icon:'none',
							duration: 2000
						});
						return 1;
					}
					this.liveinfo=data['info'][0];
					this.audience=data['info'][0]['userlists'];
					
					//调用链接socket
					this.socketConnect(this.chat_item);
				},
				fail: () => {},
				complete: () => {}
			});

		},
		methods: {
			goback(){
				//退出房间
				let pages = getCurrentPages(); // 当前页面
				let beforePage = pages[pages.length - 2]; // 前一个页面
				uni.navigateBack({
				 success: function() {
					this.socket.close(); //关闭socket
					beforePage.onLoad(); // 执行前一个页面的onLoad方法
				 }
				});
			},
			//************连接socket，接受socket
			socketConnect(chat_item) {
				var liveinfo=this.liveinfo;
				var data = {
				  uid: this.uid,
				  username: this.userinfo.user_nicename,
				  token: this.token,
				  roomnum: this.liveuid,
				  stream: this.stream,
				};
				//socket链接
				this.socket=io(app.globalData.socket_url);
				
				this.socket.on('connect', function (datas) {
					console.log('连接socket成功');
					socket.emit("conn", data);
				});		
				const socket = this.socket;			
				/*客户端广播接收broadcasting*/
				socket.on('broadcastingListen', function (data) {
				    for(var i=0;i<data.length;i++){
						if(i!='remove'){
							if(data[i]=="stopplay"){
								JsInterface.superStopRoom();
							}else{
								var data = JSON.parse(data[i]);
								var msgObject = data.msg[0];
								var msgtype = msgObject.msgtype;
								var msgaction = msgObject.action;
								var msgmethod = msgObject._method_;
								var retcode = data.retcode;
								if(retcode=='409002'){
								    uni.showToast({
								    	title: '你已被禁言',
								    	icon:'none',
								    	duration: 2000
								    });
								    return;
								}
								if(msgmethod=='SendMsg'){ //聊天信息
									if(msgtype==0){  //用户进入
										//接受普通聊天消息   点亮RGB(157, 201, 255) ran
										var ct = msgObject["ct"];
										var uname = ct['user_nicename'];
										var uavatar = ct['avatar_thumb'];
										var uid = ct['id'];
										var content = "进入了直播间";
										var vip_type=ct['vip_type'];
										var level=ct['level'];
										var dic = {
											uid: uid,
											uname: uname,
											uavatar: uavatar,
											msgtype: msgtype,
											content: content,
											method: msgmethod, //根据method判断字体颜色
											vip_type:vip_type,
										};
										chat_item.push(dic);
									}else if(msgtype == '1'){ //直播结束
										uni.showToast({
											title: '直播结束',
											icon:'none',
											duration: 2000
										});
									}else if(msgtype == '2'){ //普通聊天
										//接受普通聊天消息
										var ct = msgObject["ct"];
										var uid = msgObject['uid'];
										var uname = msgObject['uname'];
										var uavatar = msgObject['avatar_thumb'];
										var level = msgObject['level'];
										var vip_type = msgObject['vip_type'];
										var liangname = msgObject['liangname'];
										var level=msgObject['level'];
										//判断点亮
										var dic = {
											msgtype: msgtype,
											light: msgObject['heart'],//判断是不是点亮消息
											vip_type: vip_type,//判断是不是vip
											liangname: liangname,//判断是不是靓号
											uname: uname,//用户名称
											uid: uid,//用户名称
											content: ct,//聊天内容 
											method: msgmethod,//根据method判断字体颜色
										};
										chat_item.push(dic);
									}
									
									
								}else if(msgmethod=='SendGift'){ //赠送礼物
									this.sendGift(msgObject);
								}else if(msgmethod=='BuyKeeper'){ //购买守护
									//this.buyKeeper(msgObject);
								}else if(msgmethod=='SendHorn'){ //喇叭
									this.sendHorn(msgObject);
								}else if(msgmethod=='SystemNot' || msgmethod=='ShutUpUser'){ 
									//系统信息
									var dic = {
									  content: msgObject.ct,//聊天内容 
									  method: 'SystemNot',//根据method判断字体颜色
									};
									chat_item.push(dic);
								}else if(msgmethod=='StartEndLive'){ //开关播
									this.showEndRecommend(msgObject);
								}else if(msgmethod=='disconnect'){ //关播
									//this.disconnect(msgObject);
								}else if(msgmethod=='requestFans'){ //关播
									//var nums=msgObject.ct.data.info.nums;
									//this.setRoomNums(nums);
								}else if(msgmethod=='KickUser'){ //踢人
									this.KickUser(msgObject);
								}
							}			
						}
				
					}
					
				});
				socket.on('disconnect', function () {
				  console.log('you have been disconnected');

				});
			},
			send() {
				var that = this;
				if (that.livechat == "") {
					uni.showToast({
						icon: 'none',
						title: '请输入内容'
					});
					return;
				}
				
				var userinfo=this.userinfo;
				
				var data = {
				  msg: [
				    {
				      _method_: 'SendMsg',
				      action: '0',
				      msgtype: '2',
				      ct: that.livechat,
				      uid: userinfo.id,
				      uname: userinfo.user_nicename,
				      roomnum: this.liveuid,
				      level: userinfo.level,
				      vip_type: userinfo.vip.type,
				      liangname: userinfo.liang.name,
				    }],
				  'retcode': '000000',
				  'retmsg': 'OK'
				};
				that.socket.emit('broadcast', data);
				that.livechat='';
				
				
			},
			transport(){
				//展示输入框
				this.flag=false;
				this.flag_num=2;
			},
			transport_g(){
				//隐藏输入框
				if(this.flag_num==2){
					this.flag=true;
					this.flag_num=1;
				}
			},
			livechat_input(e){
				//聊天发送内容
				this.livechat=e.detail.value;
			},
			open(mode) {
				this.modeClass = mode;
				this.transShow = !this.transShow;
			}
		
		},
		components:{
			livepullTop,
			livepullChat,
		}
	}
</script>

<style>
	.content{
		flex: 1;
		/* background-color: #000000; */
		position: relative;
	}
	.chat_chat{
		position: relative;
	}
	
	
	
</style>
